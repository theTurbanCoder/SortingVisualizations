{"version":3,"sources":["components/sortingAlgorithms.js","components/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["bubbleSort","auxArray","animations","n","i","j","push","swap","selectionSort","auxarray","minIndex","insertionSort","key","mergeSort","A","start","end","mid","Math","floor","mergeArray","temp","length","index1","index2","React","memo","props","useState","array","setArray","resetArray","min","max","myArray","index","random","jsSortedArray","slice","sort","a","b","console","log","myBubbleSort","arr1","arr2","checkEqualArrays","isColorChange","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","myMergeSort","myInsertionSort","mySelectionSort","useEffect","className","map","value","idx","onClick","history","createBrowserHistory","listen","location","ReactGA","initialize","set","page","pathname","pageview","App","exact","path","component","SortingVisualizer","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27d4d3d0.chunk.js","sourcesContent":["/**\n * \n * @param {[]} array \n * @param {number} n \n */\nexport const myBubbleSort = (array,n) => {\n    const animations = []\n    \n    let auxArray = array.slice()\n    bubbleSort(auxArray, animations, n)\n    console.log(auxArray.length, animations.length)\n    return [auxArray, animations]\n}\n\n\nexport const mySelectionSort = (array, n) => {\n\n    const animations = []\n    let auxArray = array.slice()\n    selectionSort(auxArray, animations, n)\n    return [auxArray, animations]\n}\n\n\nlet bubbleSort = ( auxArray, animations,n) => {\n\n    for (let i = 0; i < n-1; i++) {      \n            for (let j = 0; j < n-i-1; j++) {\n\n                animations.push([j,j+1])\n                animations.push([j,j+1])\n\n                if (auxArray[j] > auxArray[j+1]) {\n                    animations.push([j, auxArray[j+1]])\n                    animations.push([j+1, auxArray[j]])\n                    swap(auxArray, j, j+1)\n                }\n                else{\n                    animations.push([-1,-1])\n                    animations.push([-1,-1])\n                }\n\n            }\n        }\n\n}\n\nlet selectionSort = (auxarray, animations, n) => {\n\n    for (let i = 0; i < n-1; i++) {\n       let minIndex = i\n\n       for (let j = i+1; j < n; j++) {\n\n\n            animations.push(['comparison1',j,minIndex])\n            animations.push(['comparison2',j,minIndex])\n            \n           if(auxarray[minIndex] > auxarray[j]){\n                minIndex = j\n           }\n           \n       }\n       \n       animations.push(['swap',minIndex,auxarray[i]])\n       animations.push(['swap',i,auxarray[minIndex]])\n       \n       swap(auxarray,i,minIndex);\n       \n    }\n}\n\nexport const myInsertionSort = (array,n) => {\n\n    const animations = []\n    let auxArray = array.slice()\n\n    insertionSort(auxArray, animations, n)\n    return [auxArray , animations]\n}\n\nlet insertionSort = (auxArray,animations, n) => {\n\n    for (let i = 1; i < n; i++) {\n        \n        let key = auxArray[i]\n        let j = i-1\n\n        animations.push([\"comparison1\",j,i])\n        // animations.push([\"comparison1\",j,i])\n        while(j >= 0 && auxArray[j] > key){\n\n            animations.push([\"comparison1\",j+1,j])\n            auxArray[j + 1] = auxArray[j] \n            animations.push(['swap', j+1, auxArray[j]])\n            // animations.push(['swap', j, auxArray[j+1]])\n            j = j - 1\n\n        }\n\n        auxArray[j+1] = key\n        animations.push(['swap',j+1, key])\n        // animations.push([\"comparison1\",j+1,i])\n    }\n\n}\n\n\nexport const myMergeSort = (array , n) => {\n\n    const animations = []\n    let auxArray = array.slice()\n    mergeSort(auxArray, 0, n-1, animations)\n\n    return [auxArray, animations]\n}\n\n\nlet mergeSort = (A, start, end, animations) => {\n\n    if (start < end)\n    {\n        let mid = Math.floor((start+end) / 2)\n        mergeSort(A, start, mid, animations)\n        mergeSort(A,mid+1, end, animations)\n        mergeArray(A, start, mid , end, animations)\n    }\n    else return;\n\n}\n\n\nlet mergeArray = (A, start, mid, end, animations) => {\n\n    let temp = []\n\n    // let n = (end-start+1)\n\n\n\n    let [i,j] = [start, mid+1, 0]\n\n    while(i <= mid && j <= end)\n    {\n        animations.push([i,j])\n        animations.push([i,j])\n        if (A[i] <= A[j]){\n            // temp[k] = A[i]\n            animations.push([temp.length + start, A[i]])\n            temp.push(A[i++])\n      \n        }\n        else{\n            // temp[k] = A[j]\n            animations.push([temp.length + start, A[j]])\n            temp.push(A[j++])\n\n        }\n    }\n\n\n\n    while(i <= mid) {\n        animations.push([i,i])\n        animations.push([i,i])\n        animations.push([temp.length + start, A[i]])\n        // temp[k] = A[i]\n        temp.push(A[i++])\n    \n    }\n\n\n    while( j<= end)\n    {\n        // temp[k] = A[j]\n        animations.push([j,j])\n        animations.push([j,j])\n        animations.push([temp.length + start, A[j]])\n        temp.push(A[j++])\n    }\n\n\n    for(let i=start;i<=end; i++)\n    {\n        A[i] = temp[i-start]\n    }\n\n}\n\nlet swap = (auxArray, index1, index2) => {\n\n    let temp = auxArray[index1]\n    auxArray[index1] = auxArray[index2]\n    auxArray[index2] = temp\n\n}","import React, {useState, useEffect} from 'react'\nimport './SortingVisualizer.css';\nimport {myBubbleSort} from './sortingAlgorithms'\nimport {mySelectionSort, myInsertionSort, myMergeSort} from './sortingAlgorithms'\n\nconst randomFunction = (min, max) => {\n    return Math.floor(Math.random()*(max-min+1)+min)\n}\n\n\nconst checkEqualArrays = (arr1, arr2) => {\n\n    if (arr1.length !== arr2.length) {\n        console.log(arr1.length,'length')\n        return false\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if(arr1[i] !== arr2[i]) {\n            console.log(arr1[i]+ ' !== '+ arr2[i] )\n            return false}        \n    }\n\n    return true\n}\n//\n\nexport default React.memo(props => {\n\n    const [array,setArray] = useState([])\n    const resetArray = () => {\n        const myArray= []\n        for (let index = 0; index < 120; index++) {\n            myArray.push(randomFunction(5,750))\n        }\n       setArray(myArray)\n    \n    }\n    \n    const bubbleSort = () => {\n        const jsSortedArray = array.slice().sort((a,b) => a-b)\n        const [auxArray, animations] = myBubbleSort(array, array.length)\n        \n        console.log(checkEqualArrays(jsSortedArray, auxArray))\n\n        for (let i=0;i<animations.length;i++){\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1)\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange) {\n                \n                const [barOneIdx, barTwoIdx] = animations[i]\n                // console.log(barOneIdx, barTwoIdx, animations[i])\n                const barOneStyle = arrayBars[barOneIdx].style\n                const barTwoStyle = arrayBars[barTwoIdx].style\n\n                const color = (i % 4 === 0 )? 'red': 'turquoise'\n\n                setTimeout(() => {\n                    \n                    barOneStyle.backgroundColor = color\n                    barTwoStyle.backgroundColor = color\n                }, i*10)\n\n            } else {\n                const [barOneIdx, newHeight] = animations[i]\n                if(barOneIdx !== -1){\n                const barOneStyle = arrayBars[barOneIdx].style\n                setTimeout(() => {\n                    barOneStyle.height = `${newHeight}px`\n                }, i*10)\n                }\n\n                \n            }\n        }\n\n    }\n    \n    const mergeSort = () => {\n\n        const [, animations] = myMergeSort(array,array.length)\n        // const jsSortedArray = array.slice().sort((a,b) => a-b)\n\n        for (let i = 0; i < animations.length; i++) {\n            \n            const isColorChange = (i % 3 !== 2)\n            const arrayBars = document.getElementsByClassName('array-bar')\n\n            if(isColorChange) {\n                const color = (i % 3 === 0) ? 'red' : 'turquoise'\n                const [barOneIdx, barTwoIdx] = animations[i]\n               \n                const barOneStyle = arrayBars[barOneIdx].style\n                const barTwoStyle = arrayBars[barTwoIdx].style\n\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color\n                    barTwoStyle.backgroundColor = color\n                },i*50)\n            }\n\n            else{\n                const [barOneIdx, newHeight] = animations[i]\n                const barOneStyle = arrayBars[barOneIdx].style\n                setTimeout(() => {\n                    barOneStyle.height = `${newHeight}px`\n                }, i*50)\n\n\n                \n            }\n            \n        }\n\n\n\n    }\n\n    const quickSort = () => {\n        \n    }\n\n    const heapSort = () => {\n        \n    }\n\n    const insertionSort = () => {\n        // const jsSortedArray = array.slice().sort((a,b) => a-b)\n        const [, animations] = myInsertionSort(array, array.length)\n        \n        // console.log(checkEqualArrays(jsSortedArray,auxArray))\n        // console.log(animations)\n\n        for (let i = 0; i < animations.length; i++) {\n            \n            const isColorChange = (animations[i][0] === 'comparison1') || (animations[i][0] === 'comparison2')\n            const arrayBars = document.getElementsByClassName('array-bar')\n\n            if(isColorChange){\n                const [, barOneIdx, barTwoIdx] = animations[i]\n                // console.log('tatat')\n                const barOneStyle = arrayBars[barOneIdx].style\n                const barTwoStyle = arrayBars[barTwoIdx].style\n                const color = (animations[i][0]  === 'comparison1' ) ? 'red': 'turquoise'\n\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color\n                    barTwoStyle.backgroundColor = color\n                }, i*50)\n\n            }\n\n            else{\n                const [,barOneIdx, newHeight] = animations[i]\n\n                // console.log(barOneIdx)\n\n                const barOneStyle = arrayBars[barOneIdx].style\n\n                setTimeout(() => {\n\n                    barOneStyle.backgroundColor = 'turquoise'\n                    barOneStyle.height = `${newHeight}px`\n\n                }, i*50)\n\n            }\n            \n        }\n    }\n\n    const selectionSort = () =>{\n        \n        // const jsSortedArray = array.slice().sort((a,b) => a-b)\n        const [, animations] = mySelectionSort(array, array.length)\n        \n       \n\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0]  === 'comparison1') || (animations[i][0]  === 'comparison2')\n            const arrayBars = document.getElementsByClassName('array-bar');\n            \n            if(isColorChange) {\n\n                const [,barOneIdx, barTwoIdx] = animations[i]\n                const barOneStyle = arrayBars[barOneIdx].style\n                const barTwoStyle = arrayBars[barTwoIdx].style\n                const color = (animations[i][0]  === 'comparison1') ? 'red': 'turquoise'\n\n                setTimeout(() => {\n                    \n                    barOneStyle.backgroundColor = color\n                    barTwoStyle.backgroundColor = color\n                }, i*50)\n            }\n          \n            else {\n                const [,barOneIdx, newHeight] = animations[i]\n            \n                const barOneStyle = arrayBars[barOneIdx].style\n                setTimeout(() => {\n                    barOneStyle.height = `${newHeight}px`\n                }, i*50)\n                }\n        //     }\n            \n        }\n    }\n    \n\n    useEffect(()=>{\n        resetArray()\n    },[])\n\n   \n    return(\n        <div className='array-container'>\n        {array.map((value,idx) => {\n            return  <div className='array-bar' style={{height: `${value}px`}} key={idx}></div>\n        })}\n        <button onClick={() => resetArray()} > Generate New Array</button>\n        <button onClick={() => bubbleSort()} > Bubble Sort</button>\n        <button onClick={() => mergeSort()} > Merge Sort</button>\n        <button onClick={() => quickSort()} > Quick Sort</button>\n        <button onClick={() => heapSort()} > Heap Sort</button>\n        <button onClick={() => selectionSort()} > Selection Sort</button>\n        <button onClick={() => insertionSort()} > Insertion Sort</button>\n        </div>\n     )\n\n\n})","import React from 'react';\nimport {Router, Switch, Route} from 'react-router-dom'\nimport './App.css';\nimport SortingVisualizer from './components/SortingVisualizer';\nimport ReactGA from 'react-ga';\nimport { createBrowserHistory } from 'history';\n\n\n\n\n\nconst trackingID = \"UA-164002348-1\"\n\n\n\nconst history = createBrowserHistory()\n\nhistory.listen((location) => {\n  ReactGA.initialize(trackingID)\n  ReactGA.set({page: location.pathname})\n  ReactGA.pageview(location.pathname)\n})\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <Switch>\n            <Route exact path='/' component={SortingVisualizer} />\n        </Switch>\n      </Router>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}